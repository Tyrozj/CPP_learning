1：
#include<iostream>
using namespace std;

int* func()
{
	//在堆区创建整型的数据
	int*p=new int(10);
	return p;
}
void test0()
{
	int* p = func();
	cout << *p << endl;
	cout << *p << endl;
	cout << *p << endl;
	//堆区数据由程序员管理和释放
	//如果想释放堆区的数据，利用关键字delete
	delete p;
	//cout << *p << endl;被释放后再次访问会报错
}
//在堆区利用new开辟数组
void test1()
{
	int* arr = new int[10];//返回的为数组的首地址
	for (int i = 0; i < 10; i++)
	{
		arr[i] = i + 1000;
	}
	for (int i = 0; i < 10; i++)
	{
		cout << arr[i] << endl;
	}
	delete[] arr;//释放堆区数组,需要加一个中括号
	
}
int main()
{

	test0();
	test1();

	system("pause");
	return 0;
}


2：
#include<iostream>
using namespace std;
//1.核心：起别名
//2.引用做函数返回值
int& test03()
{
	static int a = 10;
	return a;
}
int main()
{
	int a = 10;
	int& b = a;//创建引用
	cout << "a=" << a<<endl;
	cout << "b=" << b << endl;
	b = 20;
	cout << "a=" << a<<endl;

	int& ref = test03();//ref为a的引用
	cout << "ref=" << ref << endl;
	//如果函数的返回值为引用，则函数调用可以作为左值
	test03() = 1000;//返回a的引用，对其赋值为1000
	cout << "ref=" << ref << endl;
	system("pause");
	return 0;
}
